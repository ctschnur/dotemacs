* dotemacs - my emacs configuration + unpolished elisp code
** Installation: 
*** on windows
The init file is first read from the location of the environment variable ~HOME~ (https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Location-of-init-file.html). 
Check the value of this environment variable using
#+BEGIN_SRC shell
echo %HOME%
#+END_SRC

If it's not set, you can edit the local account environment variables and check again. 

If ~%HOME%~ doesn't exist, emacs looks in the ~AppData~ directory. There you can put a file ~.emacs~ which just loads the actual ~init.el~, within which you set your ~user-emacs-directory~ to your dotemacs repo's ~.emacs.d/~ folder. To do that, copy the template over to the ~AppData~ directory: 
#+BEGIN_SRC shell
cp .emacs_template_windows C:/Users/[username]/AppData/Roaming/.emacs
#+END_SRC

*** on ubuntu
Emacs looks to find ~.emacs~ in ~$HOME~, so say ~echo $HOME~ to find where to put the ~.emacs_template~ file. 
Do the same thing as for windows, just adjust the paths. 

** Explanations: 
The ~elisp~ directory should be used to hold clones of my own elisp packages (which are not yet on melpa, but [[https://github.com/ctschnur?tab=repositories&q=cs-&type=&language=][here]]), in addition to the ~in-dev~ folder, in which I develop ideas. 
The ~.gitignore~ should ignore all subdirs in ~elisp/~, except ~in-dev~. 

** TODO List:   
*** TODO get auto-completion and jump-to-definition for python working on Windows. 
I tried all kinds of combinations:
- anaconda mode with pyvenv
- elpy, pyvenv (not conda- or windows-aware, just knows virtual environments on linux)
- ~jedi.el~ on it's own
**** Problems:
- There is no directly usable standard python system python pre-installed on windows 
(you need to run it as administrator). 
- Some parsing libraries may rely on a /standard/ python installation that is not the 
one in the virtual environment, just to run it's basic commands (e.g. elpy uses an 
rpc process and an extra virtual environment for the rpc-python and it's packages). 
**** Workarounds: 
- Within a project, use ~cs-helm-projectile-ag~ to search for definitions and jump to them. 
  To find files recursively in a project, use ~helm-projectile-find-file-from-directory~. 
- I am starting to think of building my own completion library (or company backend), 
  based on jedi, all of this just to handle the paths correctly and to know what jedi 
  is doing exactly. 

